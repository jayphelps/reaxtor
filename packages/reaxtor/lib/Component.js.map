{"version":3,"sources":["../src/Component.js"],"names":[],"mappings":"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","file":"Component.js","sourcesContent":["const  { isArray } = Array;\nimport _debug from 'debug';\nimport { inspect } from 'util';\n\nimport { Event } from './Event';\nimport { Changes } from './Changes';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport /*{ of } from*/ 'rxjs/add/observable/of';\nimport /*{ from } from*/ 'rxjs/add/observable/from';\nimport /*{ empty } from*/ 'rxjs/add/observable/empty';\nimport /*{ combineLatest } from*/ 'rxjs/add/observable/combineLatest';\n\nimport /*{ scan } from*/ 'rxjs/add/operator/scan';\nimport /*{ startWith } from*/ 'rxjs/add/operator/startWith';\nimport /*{ switchMap } from*/ 'rxjs/add/operator/switchMap';\nimport /*{ switchMapTo } from*/ 'rxjs/add/operator/switchMapTo';\nimport /*{ distinctUntilChanged } from*/ 'rxjs/add/operator/distinctUntilChanged';\n\nexport class Component extends Observable {\n    constructor (data, children = []) {\n        super();\n        // If this Component was created via snabbdom JSX, aggregate\n        // all the containers that can hold props data.\n        const { dataset = {}, parent,\n                depth = 0, index = 0,\n                attrs = {}, props = {} } = data;\n        delete data.attrs;\n        delete data.props;\n        delete data.depth;\n        delete data.index;\n        delete data.parent;\n        delete data.dataset;\n        if (typeof data.render === 'function') {\n            this.render = data.render;\n            delete data.render;\n        }\n        if (children.length === 1) {\n            const head = children[0];\n            if (typeof head === 'function') {\n                this.render = children.pop();\n            } else if (typeof head.item === 'function' && typeof head.render === 'function') {\n                children.pop();\n                this.item = head.item;\n                this.render = head.render;\n            }\n        }\n        this.depth = depth;\n        this.index = index;\n        this.parent = parent;\n        this.props = { ...data, ...attrs, ...props, ...dataset };\n        this.children = children;\n    }\n    observe(parent, depth = 0, index = 0) {\n\n        const debug = _debug(`reaxtor:component`);\n        const { props, props: { path = [] }, children } = this;\n        const hasDynamicChildren = typeof this.item === 'function';\n\n        let indent = '';\n        if (debug.enabled) {\n            let indentIdx = 0;\n            while (++indentIdx <= depth) {\n                indent += '    ';\n            }\n            indent += '|---';\n        }\n\n        const modelsAndState = Changes.from(parent, this, indent).deref(path);\n\n        const distinctModelsAndState = modelsAndState.distinctUntilChanged(\n            (currKey, nextKey) => !this.shouldComponentUpdate(currKey, nextKey),\n            (modelsAndState) => {\n                const nextKey = this.mapUpdate(modelsAndState[0], depth, index);\n                if (debug.enabled) { debug(`     will update ${indent} ${nextKey}`); }\n                return nextKey;\n            }\n        );\n\n        const componentState = distinctModelsAndState.scan(\n            (componentState, modelsAndState) => {\n                componentState[0] = modelsAndState[0];\n                componentState[1] = { ...modelsAndState[1], ...componentState[1] };\n                return componentState;\n            }, [null, props]\n        );\n\n        const modelAndRemoteState = componentState.switchMap(\n            (componentState) => {\n                if (debug.enabled) { debug(`get remote state ${indent} ${this.key}`); }\n                return convertToObservable(this.getRemote(...componentState));\n            },\n            (componentState, newRemoteState = {}) => {\n                if (newRemoteState.json) { newRemoteState = newRemoteState.json; };\n                componentState[1] = this.mapRemoteState(componentState[1], newRemoteState);\n                return componentState;\n            }\n        );\n\n        const modelAndLocalState = modelAndRemoteState.switchMap(\n            (componentState) => {\n                if (debug.enabled) { debug(`get events state ${indent} ${this.key} ${serializeStateWithIndent(indent, componentState[1])}`); }\n                return convertToObservable(this\n                    .getEvents(...componentState), true)\n                    .startWith(componentState[1])\n            },\n            (componentState, newLocalState = {}) => {\n                if (newLocalState.json) { newLocalState = newLocalState.json };\n                componentState[1] = this.mapEventsState(componentState[1], newLocalState);\n                return componentState;\n            }\n        );\n\n        const updateChildren = hasDynamicChildren ? (\n            (subjects, children) => {\n                return (componentState) => {\n                    const active = this.deref(subjects, children, depth, ...componentState);\n                    return (active.length === 0) ?\n                        Observable.of(children = active) :\n                        Observable.combineLatest(children = active);\n                };\n            })([], []) : (\n            (children) => {\n                return () => Observable.combineLatest(children);\n            })(children.map((child, index) => (\n                child.observe(modelAndLocalState, depth + 1, index))\n            ));\n\n        const childUpdates = modelAndLocalState.switchMap(updateChildren, (componentState, children) => [\n            ...componentState, ...children\n        ]);\n\n        const vDOMs = childUpdates.switchMap((xs) => {\n            if (debug.enabled) { debug(`     will render ${indent} ${this.key} ${serializeStateWithIndent(indent, xs[1])}`); }\n            return convertToObservable(this.render(...xs.slice(1)));\n        });\n\n        return vDOMs;\n    }\n    shouldComponentUpdate(currKey, nextKey) {\n        return currKey !== nextKey;\n    }\n    getRemote(model, props) {\n        const { keys = null } = props;\n        if (!keys) {\n            return undefined;\n        } else if (typeof keys === 'string') {\n            return model.get(keys);\n        } else if (isArray(keys)) {\n            return model.get(...keys);\n        }\n        return undefined;\n    }\n    getEvents(model, props) {\n        return undefined;\n    }\n    render(props, ...children) {\n        return {\n            sel: 'i', key: this.key,\n            text: undefined, elm: undefined,\n            data: undefined, children: children\n        };\n    }\n    mapUpdate(model, depth, index) {\n        return (this.key =\n            `{d: ${depth}, i: ${index}} ${model.inspect()} ${this.name || this.constructor.name}`);\n    }\n    mapRemoteState(currState, nextState) {\n        return Object.assign(currState, nextState);\n    }\n    mapEventsState(currState, nextState) {\n        return Object.assign(currState, nextState);\n    }\n    deref(subjects, children, depth, _model, _state, ids = _state) {\n\n        const isRange = !isArray(ids) && (('from' in ids) || ('to' in ids));\n        const offset = isRange ? ids.from || 0 : 0;\n        const to = isRange ? ids.to || (ids.length + 1) : ids.length || offset;\n\n        let index = -1;\n        let count = to - offset;\n\n        while (++index <= count) {\n            const key = isRange || index > to ?\n                index + offset :\n                ids !== _state && ids[index] || index;\n            if (!subjects[index]) {\n                children[index] = this\n                    .item(_state[key], key, index)\n                    .observe(\n                        subjects[index] = new BehaviorSubject(),\n                        depth + 1, index\n                    );\n            }\n        }\n\n        index = count - 1;\n        children.length = count;\n        count = subjects.length;\n        while (++index < count) {\n            subjects[index].complete();\n        }\n\n        index = -1;\n        count = subjects.length = children.length;\n        while (++index < count) {\n            subjects[index].next([_model, _state]);\n        }\n\n        return children;\n    }\n    listen(name) {\n        const subjects = this.subjects || (this.subjects = {});\n        const subject = subjects[name] || (subjects[name] = new Event());\n        subject.eventName = name;\n        return subject;\n    }\n    dispatch(name) {\n        const handlers = this.handlers || (this.handlers = {});\n        const responder = handlers[name] || (handlers[name] = this.trigger.bind(this, name));\n        responder.eventName = name;\n        return responder;\n    }\n    trigger(name, value) {\n        const subjects = this.subjects;\n        if (subjects) {\n            const subject = subjects[name];\n            if (subject) {\n                subject.next(value);\n            }\n        }\n    }\n}\n\nfunction serializeStateWithIndent(indent, state) {\n\n    let result = inspect(state, { depth: null });\n\n    // if ((/(\\n|\\r)/i).test(result)) {\n\n        const spaces = '                     ';\n        const indent2 = '       ';\n        const indent3 = indent2 + indent.replace(/(\\||\\-)/ig, ' ');\n\n        result = result.slice(1, -1);\n        result = `\\n${spaces}${indent2}{` +\n        (`\\n ${ result }`).replace(\n            /(\\n|\\r)/ig,\n            `\\n${spaces}${indent3}`\n        ) + `\\n${spaces}${indent2}}\\n`;\n    // }\n\n    return result;\n}\n\nimport { isPromise } from 'rxjs/util/isPromise';\nimport { $$observable } from 'symbol-observable';\n\nfunction convertToObservable(ish, skipNulls) {\n    if (ish == null) {\n        if (skipNulls) {\n            return Observable.empty();\n        }\n        return Observable.of(ish);\n    } else if (ish instanceof Observable ||\n        isArray(ish) || isPromise(ish)) {\n        return ish;\n    } else if (typeof ish[$$observable] === 'function') {\n        return ish[$$observable]();\n    } else if (typeof ish.subscribe === 'function') {\n        return Observable.from(ish);\n    } else {\n        return Observable.of(ish);\n    }\n}\n"]}