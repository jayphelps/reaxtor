{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;QAMS,M;QAAQ,M;QAAQ,O,GAAA,O;;;AAEzB,SAAS,OAAT,CAAiB,SAAjB,EAA4B,KAA5B,EAA+C;AAAA,QAAZ,KAAY,yDAAJ,EAAI;;;AAE3C,QAAI,UAAU,KAAd;AACA,QAAI,UAAU,KAAd;AACA,QAAM,WAAW,yCAAjB;AACA,QAAM,aAAa,yCAAnB;AAL2C,iBAMzB,KANyB;AAAA,QAMnC,KANmC,UAMnC,KANmC;;AAO3C,QAAM,QAAQ,CAAC,KAAD,EAAQ,UAAU,KAAlB,CAAd;AACA,QAAM,SAAS,0BAAoB,KAApB,CAAf;AACA,QAAM,6BAA6B,MAAM,kBAAzC;;AAEA,UAAM,kBAAN,GAA2B,YAAW;AAClC,YAAI,OAAJ,EAAa;AAAE,mBAAO,UAAU,IAAjB;AAAwB;AACvC,kBAAU,IAAV;AACA,WAAG;AACC,sBAAU,KAAV;;AAEA,gBAAM,uBAAuB,CAAC,QAAQ,IAAT,EAAe,UAAf,EAA7B;;AAEA,uBAAW,KAAX,GAAmB,SAAS,KAAT,GAAiB,gBAAO,MAAP,CAChC,CAAC,uBAAuB,gBAAO,MAAP,CAAc,MAAtC,IAAgD,gBAAO,MAAP,CAAc,MAD9B,CAApC;;AAIA,gDAAkC,oBAAlC;;AAEA,gBAAI,0BAAJ,EAAgC;AAC5B,2CAA2B,IAA3B,CAAgC,IAAhC;AACH;;AAED,kBAAM,CAAN,IAAW,KAAX;AACA,kBAAM,CAAN,IAAW,UAAU,KAArB;;AAEA,mBAAO,IAAP,CAAY,KAAZ;AACH,SAnBD,QAmBQ,YAAY,IAnBpB;AAoBH,KAvBD;;AAyBA,UAAM,kBAAN,CAAyB,IAAzB,CAA8B,MAAM,aAApC;;AAEA,WAAO,UAAU,OAAV,CAAkB,MAAlB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,GAAhC,CAAoC,UAAC,IAAD,EAAU;AACjD,0CAAgC,MAAM,UAAN,EAAhC;AACA,kBAAU,KAAV;AACA,cAAM,CAAN,IAAW,KAAX;AACA,cAAM,CAAN,IAAW,IAAX;AACA,eAAO,KAAP;AACH,KANM,CAAP;AAOH","file":"index.js","sourcesContent":["import _debug from 'debug';\nimport falcor from 'falcor';\nimport Router from 'falcor-router';\nimport { BehaviorSubject } from 'rxjs';\nimport /*{ map } from*/ 'rxjs/add/operator/map';\n\nexport * from './Event';\nexport * from './Model';\nexport * from './Component';\n\nexport { falcor, Router, reaxtor };\n\nfunction reaxtor(component, model, props = {}) {\n\n    let working = false;\n    let reenter = false;\n    const debugEnd = _debug(`reaxtor:lifecycle`);\n    const debugStart = _debug(`reaxtor:lifecycle`);\n    const { _root } = model;\n    const array = [model, component.props];\n    const models = new BehaviorSubject(array);\n    const previousOnChangesCompleted = _root.onChangesCompleted;\n\n    _root.onChangesCompleted = function() {\n        if (working) { return reenter = true; }\n        working = true;\n        do {\n            reenter = false;\n\n            const topLevelModelVersion = (model = this).getVersion();\n\n            debugStart.color = debugEnd.color = _debug.colors[\n                (topLevelModelVersion + _debug.colors.length) % _debug.colors.length\n            ];\n\n            debugStart(`           start | v${topLevelModelVersion}`);\n\n            if (previousOnChangesCompleted) {\n                previousOnChangesCompleted.call(this);\n            }\n\n            array[0] = model;\n            array[1] = component.props;\n\n            models.next(array);\n        } while(reenter === true);\n    };\n\n    _root.onChangesCompleted.call(_root.topLevelModel);\n\n    return component.observe(models, 0, 0).map((vdom) => {\n        debugEnd(`             end | v${model.getVersion()}`);\n        working = false;\n        array[0] = model;\n        array[1] = vdom;\n        return array;\n    });\n}\n"]}