{"version":3,"sources":["../src/createFragment.js"],"names":[],"mappings":"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","file":"createFragment.js","sourcesContent":["import { mergeFalcorNodes } from './utils';\nimport { Observable, ReplaySubject } from 'rxjs';\n\nfunction getState(store) {\n    return (!store || typeof store.getState !== 'function') ?\n        store : store.getState();\n}\n\nexport function createFragment(resolver, actionResolver, specifiedPath) {\n\n    if (actionResolver) {\n        const actionResolverType = typeof actionResolver;\n        if (actionResolverType !== 'function') {\n            if (!specifiedPath) {\n                if (Array.isArray(actionResolver) || actionResolverType === 'string') {\n                    specifiedPath = actionResolver;\n                    actionResolver = undefined;\n                }\n            }\n            if (actionResolverType === 'object') {\n                actionResolver = (function(resolverTable) {\n                    return function actionResolver(action) {\n                        if (action && action.type in resolverTable) {\n                            return resolverTable[action.type];\n                        }\n                    }\n                }(actionResolver));\n            }\n        }\n    }\n\n    return function partialFragment(falcorModels, fallbackPath) {\n\n        const boundPath = specifiedPath || fallbackPath;\n\n        if (boundPath) {\n            falcorModels = falcorModels.deref(boundPath);\n        }\n\n        falcorModels = falcorModels.distinctUntilChanged(\n            (currKey, nextKey) => currKey === nextKey,\n            ([model]) => model.$__key = model.inspect()\n        );\n\n        return function fragmentMiddleware(action$, store) {\n\n            const arrayWrapper = new Array(3);\n\n            const latestModelAndState = falcorModels.mergeMap(\n                ([model, state]) => resolver(model, state),\n                ([model, state], { json }) => {\n                    arrayWrapper[0] = model;\n                    // arrayWrapper[1] = mergeFalcorNodes(state, json);\n                    arrayWrapper[1] = json;\n                    arrayWrapper[2] = undefined;\n                    return arrayWrapper;\n                }\n            );\n\n            if (!actionResolver) {\n                return latestModelAndState;\n            }\n\n            return latestModelAndState.multicast(\n                () => new Subject(),\n                (latestModelAndState) => Observable.merge(\n                    latestModelAndState,\n                    action$.withLatestFrom(latestModelAndState, (action, [model, state]) => {\n                        arrayWrapper[0] = model;\n                        arrayWrapper[1] = state;\n                        arrayWrapper[2] = actionResolver(action);\n                        return arrayWrapper;\n                    })\n                    .filter((arrayWrapper) => !!arrayWrapper[2])\n                    .mergeMap(\n                        ([model, state, resolver]) => resolver(model, state),\n                        ([model, state], { json }) => {\n                            arrayWrapper[0] = model;\n                            // arrayWrapper[1] = mergeFalcorNodes(state, json);\n                            arrayWrapper[1] = json;\n                            arrayWrapper[2] = undefined;\n                            return arrayWrapper;\n                        }\n                    )\n                )\n            );\n        }\n    }\n}\n"]}