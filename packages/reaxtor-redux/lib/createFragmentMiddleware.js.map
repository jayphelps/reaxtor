{"version":3,"sources":["../src/createFragmentMiddleware.js"],"names":[],"mappings":";;;;;;;;QAKgB,wB,GAAA,wB;;AALhB;;AACA;;AACA;;AACA;;AAEO,SAAS,wBAAT,CAAkC,SAAlC,EAA6C,YAA7C,EAA2D;;AAE9D,QAAI,UAAU,KAAd;AACA,QAAI,UAAU,KAAd;;AAEA,QAAM,YAAY,EAAlB;AACA,QAAM,eAAe,IAAI,KAAJ,CAAU,CAAV,CAArB;AAN8D,QAOtD,KAPsD,GAO5C,SAP4C,CAOtD,KAPsD;AAAA,QAQtD,kBARsD,GAQ/B,KAR+B,CAQtD,kBARsD;;AAS9D,QAAM,UAAU,0BAAoB,YAApB,CAAhB;;AAEA,iBAAa,CAAb,IAAkB,SAAlB;AACA,iBAAa,CAAb,IAAkB,SAAlB;;AAEA,UAAM,kBAAN,GAA2B,YAAW;AAClC,YAAI,OAAJ,EAAa;AAAE,mBAAO,UAAU,IAAjB;AAAwB;AACvC,kBAAU,IAAV;AACA,WAAG;AACC,sBAAU,KAAV;AACA,gBAAI,kBAAJ,EAAwB;AACpB,mCAAmB,IAAnB,CAAwB,IAAxB;AACH;AACD,yBAAa,CAAb,IAAkB,IAAlB;AACA,yBAAa,CAAb,IAAkB,SAAlB;AACA,sBAAU,UAAV;AACA,oBAAQ,IAAR,CAAa,YAAb;AACH,SATD,QASQ,SAAS,YAAY,IAT7B;AAUH,KAbD;;AAeA,mBAAe,aAAa,cAAO,IAAP,CAAY,OAAZ,CAAb,CAAf;;AAEA,WAAO,2CAAqB,UAAS,OAAT,EAAkB,KAAlB,EAAyB;AACjD,eAAO,aAAa,OAAb,EAAsB,KAAtB,EACF,EADE,CACC;AAAA,mBAAM,UAAU,KAAhB;AAAA,SADD,EAEF,GAFE,CAEE;AAAA;;AAAA,gBAAE,KAAF;AAAA,gBAAS,KAAT;AAAA,mBAAqB;AACtB,sBAAM,KADgB,EACT,MAAM;AADG,aAArB;AAAA,SAFF,CAAP;AAKH,KANM,CAAP;AAOH","file":"createFragmentMiddleware.js","sourcesContent":["import { Models } from './utils';\nimport { Model } from 'reaxtor-falcor';\nimport { BehaviorSubject } from 'rxjs';\nimport { createEpicMiddleware } from 'redux-observable';\n\nexport function createFragmentMiddleware(rootModel, rootFragment) {\n\n    let working = false;\n    let reenter = false;\n\n    const rootState = {};\n    const arrayWrapper = new Array(2);\n    const { _root } = rootModel;\n    const { onChangesCompleted } = _root;\n    const changes = new BehaviorSubject(arrayWrapper);\n\n    arrayWrapper[0] = rootModel;\n    arrayWrapper[1] = rootState;\n\n    _root.onChangesCompleted = function() {\n        if (working) { return reenter = true; }\n        working = true;\n        do {\n            reenter = false;\n            if (onChangesCompleted) {\n                onChangesCompleted.call(this);\n            }\n            arrayWrapper[0] = this;\n            arrayWrapper[1] = rootState;\n            rootModel.derefCount++;\n            changes.next(arrayWrapper);\n        } while(false && reenter === true);\n    }\n\n    rootFragment = rootFragment(Models.from(changes));\n\n    return createEpicMiddleware(function(action$, store) {\n        return rootFragment(action$, store)\n            .do(() => working = false)\n            .map(([model, state]) => ({\n                data: state, type: 'falcor'\n            }));\n    });\n}\n\n"]}