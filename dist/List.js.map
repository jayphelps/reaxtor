{"version":3,"sources":["../src/List.js"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["import { Base } from './Base';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nexport class List extends Base {\n    static listItemLoader(\n        lengthPathSelector = () => (['length']),\n        resultPathSelector = ({ json: { length }}) => (['length']),\n        suffixPathSelector = ({ json: { length }}) => ([])\n    ) {\n        return function loadListItems(...args) {\n            const [model] = args[0];\n            return model\n                .get(lengthPathSelector(...args))\n                .mergeMap((result) => {\n                    const paths = [resultPathSelector(result)];\n                    if (paths.length > 0) {\n                        paths.push(suffixPathSelector(result));\n                    }\n                    return model.get(...paths);\n                })\n        }\n    }\n    create(models) {\n        var subjects = [];\n        var children = [];\n        return models.switchMap((tuple) => {\n            const kids = this.deref(subjects, children, tuple);\n            if (kids.length === 0) {\n                return Observable.of([tuple]);\n            }\n            return Observable.combineLatest(\n                children = kids, (...args) => [tuple, ...args]\n            );\n        });\n    }\n    deref(subjects, children, [ _model, _state ]) {\n\n        let index = -1;\n        let count = _state.length;\n\n        while (++index < count) {\n            if (!subjects[index]) {\n                subjects[index] = new Subject();\n                children[index] = this.createChild(subjects[index], index);\n            }\n        }\n\n        index = count - 1;\n        children.length = count;\n        count = subjects.length;\n        while (++index < count) {\n            subjects[index].complete();\n        }\n\n        index = -1;\n        count = subjects.length = children.length;\n        while (++index < count) {\n            const state = _state[index];\n            const model = _model.deref(state);\n            subjects[index].next([model, state, index]);\n        }\n\n        return children;\n    }\n}\n"]}