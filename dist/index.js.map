{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;iQAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;QAES,I;QAAM,K;QAAO,K;QAAO,M;QAAQ,S;QAAW,S;QAAW,M;QAAQ,O,GAAA,O;;;AAEnE,SAAS,OAAT,CAAiB,SAAjB,EAA4B,KAA5B,EAA+C;AAAA,QAAZ,KAAY,yDAAJ,EAAI;;;AAE3C,QAAI,cAAJ;AACA,QAAI,UAAU,KAAd;AACA,QAAI,UAAU,KAAd;AAJ2C,iBAKzB,KALyB;AAAA,QAKnC,KALmC,UAKnC,KALmC;;AAM3C,QAAM,QAAQ,CAAC,KAAD,EAAQ,KAAR,CAAd;AACA,QAAM,SAAS,0BAAoB,KAApB,CAAf;AACA,QAAM,UAAU,iBAAQ,IAAR,CAAa,MAAb,EAAqB,EAAE,KAAK,EAAP,EAArB,CAAhB;AACA,QAAM,6BAA6B,MAAM,kBAAzC;;AAEA,UAAM,kBAAN,GAA2B,YAAW;AAClC,YAAI,OAAJ,EAAa;AAAE,mBAAO,UAAU,IAAjB;AAAwB;AACvC,kBAAU,IAAV;AACA,WAAG;AACC,sBAAU,KAAV;;AAEA,gBAAM,uBAAuB,CAAC,QAAQ,IAAT,EAAe,UAAf,EAA7B;;AAEA,oBAAQ,yCAAR;AACA,kBAAM,KAAN,GAAc,gBAAO,MAAP,CACV,CAAC,uBAAuB,gBAAO,MAAP,CAAc,MAAtC,IAAgD,gBAAO,MAAP,CAAc,MADpD,CAAd;;AAIA,qCAAuB,oBAAvB;;AAEA,gBAAI,0BAAJ,EAAgC;AAC5B,2CAA2B,IAA3B,CAAgC,IAAhC;AACH;;AAED,kBAAM,CAAN,IAAW,KAAX;AACA,kBAAM,CAAN,IAAW,KAAX;;AAEA,mBAAO,IAAP,CAAY,KAAZ;AACH,SApBD,QAoBQ,YAAY,IApBpB;AAqBH,KAxBD;;AA0BA,UAAM,kBAAN,CAAyB,IAAzB,CAA8B,MAAM,aAApC;;AAEA,WAAO,IAAI,SAAJ,cAAmB,KAAnB,IAA0B,QAAQ,OAAlC,KAA6C,GAA7C,CAAiD,UAAC,QAAD,EAAc;AAClE,iCAAuB,MAAM,UAAN,EAAvB;AACA,kBAAU,KAAV;AACA,cAAM,CAAN,IAAW,KAAX;AACA,cAAM,CAAN,IAAW,QAAX;AACA,eAAO,KAAP;AACH,KANM,CAAP;AAOH","file":"index.js","sourcesContent":["/** @jsx hJSX */\n\nimport _debug from 'debug';\nimport falcor from 'falcor';\nimport Router from 'falcor-router';\nimport { Model } from './Model';\nimport { Event } from './Event';\nimport { Changes } from './Changes';\nimport { BehaviorSubject } from 'rxjs';\nimport { Component } from './Component';\nimport { Container } from './Container';\nimport { html as hJSX } from 'snabbdom-jsx';\n\nexport { hJSX, Model, Event, Router, Component, Container, falcor, reaxtor };\n\nfunction reaxtor(RootClass, model, props = {}) {\n\n    let debug;\n    let working = false;\n    let reenter = false;\n    const { _root } = model;\n    const array = [model, props];\n    const models = new BehaviorSubject(array);\n    const changes = Changes.from(models, { key: '' });\n    const previousOnChangesCompleted = _root.onChangesCompleted;\n\n    _root.onChangesCompleted = function() {\n        if (working) { return reenter = true; }\n        working = true;\n        do {\n            reenter = false;\n\n            const topLevelModelVersion = (model = this).getVersion();\n\n            debug = _debug(`reaxtor:lifecycle`);\n            debug.color = _debug.colors[\n                (topLevelModelVersion + _debug.colors.length) % _debug.colors.length\n            ];\n\n            debug(`- start ---| v${topLevelModelVersion}`);\n\n            if (previousOnChangesCompleted) {\n                previousOnChangesCompleted.call(this);\n            }\n\n            array[0] = model;\n            array[1] = props;\n\n            models.next(array);\n        } while(reenter === true);\n    };\n\n    _root.onChangesCompleted.call(_root.topLevelModel);\n\n    return new RootClass({ ...props, models: changes }).map((rootVDom) => {\n        debug(`- end -----| v${model.getVersion()}`);\n        working = false;\n        array[0] = model;\n        array[1] = rootVDom;\n        return array;\n    });\n}\n"]}