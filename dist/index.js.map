{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,YAHS,UAAU,CAGR,SAAS,CAAC,MAAM,GAAG,YAHrB,UAAU,CAGsB,SAAS,CAAC,IAAI,CAAC;AACxD,YAJS,UAAU,CAIR,SAAS,CAAC,OAAO,GAAG,YAJtB,UAAU,CAIuB,SAAS,CAAC,KAAK,CAAC;AAC1D,YALS,UAAU,CAKR,SAAS,CAAC,WAAW,GAAG,YAL1B,UAAU,CAK2B,SAAS,CAAC,QAAQ,CAAC;;AAEjE,SATS,OAAO,CASR,SAAS,CAAC,MAAM,GAAG,SATlB,OAAO,CASmB,SAAS,CAAC,IAAI,CAAC;AAClD,SAVS,OAAO,CAUR,SAAS,CAAC,OAAO,GAAG,SAVnB,OAAO,CAUoB,SAAS,CAAC,KAAK,CAAC;AACpD,SAXS,OAAO,CAWR,SAAS,CAAC,WAAW,GAAG,SAXvB,OAAO,CAWwB,SAAS,CAAC,QAAQ,CAAC;;AA8B3D,IAAM,KAAK,GAAG,mBAAS,IAAI,CAAC,mGAA6D,CAAC,CAAC;;QAOlF,IAAI,gBAdJ,IAAI;QAcE,IAAI,SALV,IAAI;QAKQ,IAAI,SAJhB,IAAI;QAIc,KAAK,UAHvB,KAAK;QAGoB,KAAK,UAF9B,KAAK;QAE2B,OAAO,GAAP,OAAO;;AAEhD,SAAS,OAAO,CAAC,SAAS,EAAE,KAAK,EAAE;;AAE/B,QAAI,OAAO,GAAG,KAAK,CAAC;AACpB,QAAI,OAAO,GAAG,KAAK,CAAC;;AAEpB,QAAM,MAAM,GAAG,qBApDV,eAAe,CAoDe,CAAE,KAAK,CAAE,CAAC,CAAC;AAC9C,QAAM,0BAA0B,GAAG,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC;;AAElE,SAAK,CAAC,KAAK,CAAC,kBAAkB,GAAG,YAAW;AACxC,YAAI,OAAO,EAAE;AAAE,mBAAO,OAAO,GAAG,IAAI,CAAC;SAAE;AACvC,eAAO,GAAG,IAAI,CAAC;AACf,WAAG;AACC,mBAAO,GAAG,KAAK;;AAAC,AAEhB,gBAAI,0BAA0B,EAAE;AAC5B,0CAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACzC;AACD,kBAAM,CAAC,IAAI,CAAC,CAAE,IAAI,CAAE,CAAC;;AAAC,SAEzB,QAAO,OAAO,KAAK,IAAI,EAAE;AAC1B,eAAO,GAAG,KAAK,CAAC;KACnB,CAAC;;AAEF,WAAO,IAAI,SAAS,CAAC,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAC;CACpC","file":"index.js","sourcesContent":["/** @jsx hJSX */\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { BehaviorSubject } from 'rxjs/subject/BehaviorSubject';\n\nSubscriber.prototype.onNext = Subscriber.prototype.next;\nSubscriber.prototype.onError = Subscriber.prototype.error;\nSubscriber.prototype.onCompleted = Subscriber.prototype.complete;\n\nSubject.prototype.onNext = Subject.prototype.next;\nSubject.prototype.onError = Subject.prototype.error;\nSubject.prototype.onCompleted = Subject.prototype.complete;\n\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/defer';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/fromArray';\n\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/zip';\nimport 'rxjs/add/operator/last';\nimport 'rxjs/add/operator/scan';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/concat';\nimport 'rxjs/add/operator/groupBy';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/zip-static';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/withLatestFrom';\nimport 'rxjs/add/operator/combineLatest-static';\n\nimport { html as hJSX } from 'snabbdom-jsx';\nimport snabbdom from 'snabbdom';\nimport sdClass from 'snabbdom/modules/class';\nimport sdProps from 'snabbdom/modules/props';\nimport sdStyle from 'snabbdom/modules/style';\nimport sdAttributes from 'snabbdom/modules/attributes';\nimport sdEventlisteners from 'snabbdom/modules/eventlisteners';\nconst patch = snabbdom.init([ sdClass, sdProps, sdStyle, sdAttributes, sdEventlisteners ]);\n\nimport { Base } from './Base';\nimport { List } from './List';\nimport { Model } from './Model';\nimport { Event } from './Event';\n\nexport { hJSX, Base, List, Model, Event, reaxtor };\n\nfunction reaxtor(RootClass, model) {\n\n    var working = false;\n    var reenter = false;\n\n    const models = new BehaviorSubject([ model ]);\n    const previousOnChangesCompleted = model._root.onChangesCompleted;\n\n    model._root.onChangesCompleted = function() {\n        if (working) { return reenter = true; }\n        working = true;\n        do {\n            reenter = false;\n            // console.log('\\nstart top-down render ----> [');\n            if (previousOnChangesCompleted) {\n                previousOnChangesCompleted.call(this);\n            }\n            models.next([ this ]);\n            // console.log('] <---- end top-down render\\n');\n        } while(reenter === true);\n        working = false;\n    };\n\n    return new RootClass({ models });\n}\n"]}