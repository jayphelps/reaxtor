{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;QAES,I;QAAM,K;QAAO,K;QAAO,M;QAAQ,S;QAAW,S;QAAW,M;QAAQ,O,GAAA,O;;;AAEnE,SAAS,OAAT,CAAiB,SAAjB,EAA4B,KAA5B,EAA+C;AAAA,QAAZ,KAAY,yDAAJ,EAAI;;;AAE3C,QAAI,UAAU,KAAd;AACA,QAAI,UAAU,KAAd;AACA,QAAM,WAAW,yCAAjB;AACA,QAAM,aAAa,yCAAnB;AAL2C,iBAMzB,KANyB;AAAA,QAMnC,KANmC,UAMnC,KANmC;;AAO3C,QAAM,QAAQ,IAAI,KAAJ,CAAU,CAAV,CAAd;AACA,QAAM,SAAS,0BAAoB,KAApB,CAAf;AACA,QAAM,6BAA6B,MAAM,kBAAzC;;AAEA,UAAM,kBAAN,GAA2B,YAAW;AAClC,YAAI,OAAJ,EAAa;AAAE,mBAAO,UAAU,IAAjB;AAAwB;AACvC,kBAAU,IAAV;AACA,WAAG;AACC,sBAAU,KAAV;;AAEA,gBAAM,uBAAuB,CAAC,QAAQ,IAAT,EAAe,UAAf,EAA7B;;AAEA,uBAAW,KAAX,GAAmB,SAAS,KAAT,GAAiB,gBAAO,MAAP,CAChC,CAAC,uBAAuB,gBAAO,MAAP,CAAc,MAAtC,IAAgD,gBAAO,MAAP,CAAc,MAD9B,CAApC;;AAIA,yCAA2B,oBAA3B;;AAEA,gBAAI,0BAAJ,EAAgC;AAC5B,2CAA2B,IAA3B,CAAgC,IAAhC;AACH;;AAED,mBAAO,IAAP,CAAY,KAAZ;AACH,SAhBD,QAgBQ,YAAY,IAhBpB;AAiBH,KApBD;;AAsBA,UAAM,kBAAN,CAAyB,IAAzB,CAA8B,MAAM,aAApC;;AAEA,WAAO,IAAI,SAAJ,cAAmB,KAAnB,IAA0B,cAA1B,KAAoC,GAApC,CAAwC,UAAC,QAAD,EAAc;AACzD,mCAAyB,MAAM,UAAN,EAAzB;AACA,kBAAU,KAAV;AACA,cAAM,CAAN,IAAW,KAAX;AACA,cAAM,CAAN,IAAW,QAAX;AACA,eAAO,KAAP;AACH,KANM,CAAP;AAOH","file":"index.js","sourcesContent":["/** @jsx hJSX */\n\nimport _debug from 'debug';\nimport falcor from 'falcor';\nimport Router from 'falcor-router';\nimport { Model } from './Model';\nimport { Event } from './Event';\nimport { BehaviorSubject } from 'rxjs';\nimport { Component } from './Component';\nimport { Container } from './Container';\nimport { html as hJSX } from 'snabbdom-jsx';\n\nexport { hJSX, Model, Event, Router, Component, Container, falcor, reaxtor };\n\nfunction reaxtor(RootClass, model, props = {}) {\n\n    let working = false;\n    let reenter = false;\n    const debugEnd = _debug(`reaxtor:lifecycle`);\n    const debugStart = _debug(`reaxtor:lifecycle`);\n    const { _root } = model;\n    const array = new Array(2);\n    const models = new BehaviorSubject(model);\n    const previousOnChangesCompleted = _root.onChangesCompleted;\n\n    _root.onChangesCompleted = function() {\n        if (working) { return reenter = true; }\n        working = true;\n        do {\n            reenter = false;\n\n            const topLevelModelVersion = (model = this).getVersion();\n\n            debugStart.color = debugEnd.color = _debug.colors[\n                (topLevelModelVersion + _debug.colors.length) % _debug.colors.length\n            ];\n\n            debugStart(`    start | v${topLevelModelVersion}`);\n\n            if (previousOnChangesCompleted) {\n                previousOnChangesCompleted.call(this);\n            }\n\n            models.next(model);\n        } while(reenter === true);\n    };\n\n    _root.onChangesCompleted.call(_root.topLevelModel);\n\n    return new RootClass({ ...props, models }).map((rootVDom) => {\n        debugEnd(`      end | v${model.getVersion()}`);\n        working = false;\n        array[0] = model;\n        array[1] = rootVDom;\n        return array;\n    });\n}\n"]}