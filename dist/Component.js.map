{"version":3,"sources":["../src/Component.js"],"names":[],"mappings":"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","file":"Component.js","sourcesContent":["import _debug from 'debug';\nimport { inspect } from 'util';\nimport { Event } from './Event';\nimport { Changes } from './Changes';\nimport { Observable, Subscriber, BehaviorSubject } from 'rxjs';\n\nconst  { isArray } = Array;\nimport { isPromise } from 'rxjs/util/isPromise';\nimport { $$observable } from 'symbol-observable';\n\nexport class Component extends Observable {\n    constructor(props) {\n\n        super();\n\n        const debug = _debug(`reaxtor:component`);\n        let { index = 0, depth = 0, models } = props;\n\n        delete props.index;\n        delete props.depth;\n        delete props.models;\n\n        this.props = props;\n\n        let indent = '';\n        if (debug.enabled) {\n            let indentIdx = 0;\n            while (++indentIdx <= depth) {\n                indent += '    ';\n            }\n            indent += '|---';\n        }\n\n        const modelsAndStates = models\n            .distinctUntilChanged(\n                (...args) => !this.shouldComponentUpdate(...args),\n                (...args) => {\n                    const nextKey = this.mapUpdate(...args, depth, index);\n                    if (debug.enabled) {\n                        debug(`   update ${indent} ${nextKey}`);\n                    }\n                    return nextKey;\n                }\n            )\n            .switchMap(\n                (model) => {\n                    if (debug.enabled) {\n                        debug(`loadProps ${indent} ${this.key}`);\n                    }\n                    return convertToObservable(this.loadProps(model));\n                },\n                (model, { json: state = {} } = {}) => {\n                    let result = this.mapProps(model, state);\n                    if (typeof result === 'undefined') {\n                        return [model, state];\n                    } else if (isArray(result)) {\n                        if (result[0] !== model) {\n                            result = [model, ...result];\n                        }\n                        if (typeof result[1] === 'undefined') {\n                            result[1] = state;\n                        }\n                        return result;\n                    } else {\n                        return [model, state];\n                    }\n                }\n            )\n            .switchMap(\n                (modelAndState) => {\n                    if (debug.enabled) {\n                        debug(`loadState ${indent} ${this.key} ${serializeStateWithIndent(indent, modelAndState[1])}`);\n                    }\n                    return convertToObservable(this\n                        .loadState(...modelAndState), true)\n                        .startWith(modelAndState[1]);\n                },\n                (modelAndState, newState) => {\n                    let result = this.mapState(modelAndState[1], newState);\n                    if (typeof result === 'undefined') {\n                        result = { ...modelAndState[1], ...newState };\n                    }\n                    modelAndState[1] = result;\n                    return modelAndState;\n                }\n            );\n\n        const modelAndStateChanges = Changes.from(modelsAndStates, this, indent);\n\n        const vDOMs = (convertToObservable(this\n            .initialize(modelAndStateChanges, depth) || modelAndStateChanges))\n            .switchMap((args) => {\n                if (debug.enabled) {\n                    debug(`   render ${indent} ${this.key} ${serializeStateWithIndent(indent, args[1])}`);\n                }\n                return convertToObservable(this.render(...args));\n            });\n\n        this.source = vDOMs;\n    }\n    shouldComponentUpdate(currKey, nextKey) {\n        return currKey !== nextKey;\n    }\n    mapUpdate(model, depth, index) {\n        return (this.key =\n            `{d: ${depth}, i: ${index}} ${model.inspect()} ${this.constructor.name}`);\n    }\n    loadProps(model) {}\n    mapProps(model, props) {}\n    loadState(model, state) {}\n    mapState(state, newState) {}\n    initialize(changes, depth) {}\n    render() {\n        return {\n            sel: 'i', key: this.key,\n            text: undefined, elm: undefined,\n            data: undefined, children: undefined\n        };\n    }\n    listen(name) {\n        const subjects = this.subjects || (this.subjects = {});\n        const subject = subjects[name] || (subjects[name] = new Event());\n        subject.eventName = name;\n        return subject;\n    }\n    dispatch(name) {\n        const handlers = this.handlers || (this.handlers = {});\n        const responder = handlers[name] || (handlers[name] = this.trigger.bind(this, name));\n        responder.eventName = name;\n        return responder;\n    }\n    trigger(name, value) {\n        const subjects = this.subjects;\n        if (subjects) {\n            const subject = subjects[name];\n            if (subject) {\n                subject.next(value);\n            }\n        }\n    }\n}\n\nfunction serializeStateWithIndent(indent, state) {\n\n    let result = inspect(state, { depth: null });\n\n    if ((/(\\n|\\r)/i).test(result)) {\n\n        const spaces = '                     ';\n        const indent2 = '       ';\n        const indent3 = indent2 + indent.replace(/(\\||\\-)/ig, ' ');\n\n        result = result.slice(1, -1);\n        result = `\\n${spaces}${indent2}{` +\n        (`\\n ${ result }`).replace(\n            /(\\n|\\r)/ig,\n            `\\n${spaces}${indent3}`\n        ) + `\\n${spaces}${indent2}}\\n`;\n    }\n\n    return result;\n}\n\nfunction convertToObservable(ish, skipNulls) {\n    if (ish == null) {\n        if (skipNulls) {\n            return Observable.empty();\n        }\n        return Observable.of(ish);\n    } else if (ish instanceof Observable ||\n        isArray(ish) || isPromise(ish)) {\n        return ish;\n    } else if (typeof ish[$$observable] === 'function') {\n        return ish[$$observable]();\n    } else if (typeof ish.subscribe === 'function') {\n        return Observable.from(ish);\n    } else {\n        return Observable.of(ish);\n    }\n}\n"]}