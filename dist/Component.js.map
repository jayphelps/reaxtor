{"version":3,"sources":["../src/Component.js"],"names":[],"mappings":"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","file":"Component.js","sourcesContent":["import { Event } from './Event';\nimport { Changes } from './Changes';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst  { isArray } = Array;\nimport { isPromise } from 'rxjs/util/isPromise';\nimport { $$observable } from 'rxjs/symbol/observable';\n\nexport class Component extends Observable {\n    constructor(props, createChild) {\n\n        super();\n\n        let { index, models } = props;\n        delete props.index;\n        delete props.models;\n\n        this.index = index || 0;\n\n        for (const key in props) {\n            if (props.hasOwnProperty(key)) {\n                this[key] = props[key];\n            }\n        }\n\n        if (createChild) {\n            this.createChild = createChild;\n        }\n\n        const modelsAndStates = models\n            .distinctUntilChanged(\n                (...args) => !this.shouldComponentUpdate(...args),\n                (...args) => this.mapUpdate(...args)\n            )\n            .switchMap(\n                (model) => convertToObservable(\n                    this.loadProps(model) || { json: { }}),\n                (model, props) => (\n                    this.mapProps(model, props) || [model, props.json])\n            )\n            .switchMap(\n                (modelAndState) => convertToObservable(this\n                    .loadState(...modelAndState), true)\n                    .startWith(modelAndState[1]),\n                (modelAndState, newState) => ((modelAndState[1] =\n                    this.mapState(modelAndState[1], newState) || {\n                    ...modelAndState[1], ...newState\n                }) && modelAndState || modelAndState)\n            );\n\n        const modelAndStateChanges = Changes.from(modelsAndStates);\n\n        const vDOMs = (convertToObservable(this\n            .initialize(modelAndStateChanges) || modelAndStateChanges))\n            .switchMap((args) => convertToObservable(\n                this.render(...args)));\n\n        this.source = vDOMs;\n    }\n    shouldComponentUpdate(currKey, nextKey) {\n        return currKey !== nextKey;\n    }\n    mapUpdate(model) {\n        return (this.key =\n            `${this.constructor.name} ${this.index} ${model.inspect()}`);\n    }\n    loadProps(model) {\n    }\n    mapProps(model, props) {\n    }\n    loadState(model, state) {\n    }\n    mapState(state, newState) {\n    }\n    initialize(changes) {\n    }\n    render() {\n        return Observable.empty();\n    }\n    listen(name) {\n        const subjects = this.subjects || (this.subjects = {});\n        const subject = subjects[name] || (subjects[name] = new Event());\n        subject.eventName = name;\n        return subject;\n    }\n    dispatch(name) {\n        const handlers = this.handlers || (this.handlers = {});\n        const responder = handlers[name] || (handlers[name] = this.trigger.bind(this, name));\n        responder.eventName = name;\n        return responder;\n    }\n    trigger(name, value) {\n        const subjects = this.subjects;\n        if (subjects) {\n            const subject = subjects[name];\n            if (subject) {\n                subject.next(value);\n            }\n        }\n    }\n}\n\nfunction convertToObservable(ish, skipNulls) {\n    if (ish == null) {\n        if (skipNulls) {\n            return Observable.empty();\n        }\n        return Observable.of(ish);\n    } else if (ish instanceof Observable ||\n        isArray(ish) || isPromise(ish)) {\n        return ish;\n    } else if (typeof ish[$$observable] === 'function') {\n        return ish[$$observable]();\n    } else {\n        return Observable.of(ish);\n    }\n}\n"]}