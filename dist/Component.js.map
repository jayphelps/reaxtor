{"version":3,"sources":["../src/Component.js"],"names":[],"mappings":"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","file":"Component.js","sourcesContent":["import pad from 'left-pad';\nimport _debug from 'debug';\nimport { inspect } from 'util';\nimport { Event } from './Event';\nimport { Changes } from './Changes';\nimport { Observable, Subscriber, BehaviorSubject } from 'rxjs';\n\nconst  { isArray } = Array;\nimport { isPromise } from 'rxjs/util/isPromise';\nimport { $$observable } from 'symbol-observable';\n\nexport class Component extends Observable {\n    constructor(props) {\n\n        super();\n\n        const debug = _debug(`reaxtor:component`);\n        const { index = 0, depth = 0, models, path = '' } = props;\n\n        const log = (message, ...values) => {\n            if (debug.enabled) {\n                message = `${pad(message, 10 + (depth * 4))} |--- ${values.reduce((s, x) => (\n                    s + typeof x === 'object' ? '%o' : '%s'\n                ))}`\n                debug(message, ...values);\n            }\n            return values[values.length - 1];\n        };\n\n        delete props.path;\n        delete props.index;\n        delete props.depth;\n        delete props.models;\n\n        const distinctModels = models.deref(path).distinctUntilChanged(\n            (curr, next) => !this.shouldComponentUpdate(curr, next),\n            (modelAndState) => log('update', this.mapUpdate(modelAndState[0], depth, index))\n        );\n\n        const componentState = distinctModels.scan(\n            (componentState, modelAndState) => {\n                componentState[0] = modelAndState[0];\n                componentState[1] = { ...modelAndState[1] || {}, ...componentState[1] };\n                return componentState;\n            }, [null, props]\n        );\n\n        const modelsAndRemoteStates = componentState.switchMap(\n            (componentState) => {\n                log('loadProps', this.key);\n                return convertToObservable(this.loadProps(...componentState));\n            },\n            (componentState, newRemoteState = {}) => {\n                if (newRemoteState.json) { newRemoteState = newRemoteState.json; };\n                componentState[1] = this.mapProps(componentState[1], newRemoteState);\n                return componentState;\n            }\n        );\n\n        const modelsAndLocalStates = modelsAndRemoteStates.switchMap(\n            (componentState) => {\n                log('loadState', this.key, componentState[1]);\n                return convertToObservable(this\n                    .loadState(...componentState), true)\n                    .startWith(componentState[1])\n            },\n            (componentState, newLocalState = {}) => {\n                if (newLocalState.json) { newLocalState = newLocalState.json };\n                componentState[1] = this.mapState(componentState[1], newLocalState);\n                return componentState;\n            }\n        );\n\n        const modelsAndStates = Changes.from(modelsAndLocalStates, this, depth);\n\n        const children = this.observe(modelsAndStates, depth);\n        let childUpdates;\n\n        if (typeof children === 'function') {\n            childUpdates = modelsAndStates.switchMap(\n                ((create, subjects, children) => {\n                    return (componentState) => {\n                        const active = this.deref(create, subjects, children, depth, ...componentState);\n                        return (active.length === 0) ?\n                            Observable.of(children = active) :\n                            Observable.combineLatest(children = active);\n                    };\n                })(children, [], []),\n                (componentState, children) => [componentState[1], ...children]\n            );\n        } else if (children && children.length > 0) {\n            childUpdates = modelsAndStates.switchMapTo(\n                Observable.combineLatest(children),\n                (componentState, children) => [componentState[1], ...children]\n            )\n        } else {\n            childUpdates = modelsAndStates.map((componentState) => [componentState[1]]);\n        }\n\n        const vDOMs = childUpdates.switchMap((xs) => {\n            log('render', this.key, xs[0]);\n            return convertToObservable(this.render(...xs));\n        });\n\n        this.source = vDOMs;\n    }\n    shouldComponentUpdate(currKey, nextKey) {\n        return currKey !== nextKey;\n    }\n    mapUpdate(model, depth, index) {\n        return (this.key =\n            `{d: ${depth}, i: ${index}} ${model.inspect()} ${this.constructor.name}`);\n    }\n    loadProps(model, state) {}\n    loadState(model, state) {}\n    mapProps(curr, next) { return Object.assign(curr, next); }\n    mapState(curr, next) { return Object.assign(curr, next); }\n    observe(changes, depth) {}\n    render() {\n        return {\n            sel: 'i', key: this.key,\n            text: undefined, elm: undefined,\n            data: undefined, children: undefined\n        };\n    }\n    listen(name) {\n        const subjects = this.subjects || (this.subjects = {});\n        const subject = subjects[name] || (subjects[name] = new Event());\n        subject.eventName = name;\n        return subject;\n    }\n    dispatch(name, ...values) {\n        const handlers = this.handlers || (this.handlers = {});\n        const responder = values.length > 0 ?\n            (event) => this.trigger(name, [event, ...values]) :\n            (handlers[name] || (handlers[name] = this.trigger.bind(this, name)));\n        responder.eventName = name;\n        return responder;\n    }\n    trigger(name, value) {\n        const subjects = this.subjects;\n        if (subjects) {\n            const subject = subjects[name];\n            if (subject) {\n                subject.next(value);\n            }\n        }\n    }\n    deref(create, subjects, children, depth, model, state, ids = state) {\n\n        const isRange = !Array.isArray(ids) && (\n            ('from' in ids) || ('to' in ids)\n        );\n        const offset = isRange ? ids.from || 0 : 0;\n        const to = isRange ? ids.to || (ids.length + 1) : ids.length || offset;\n\n        let index = -1;\n        let count = to - offset;\n\n        while (++index <= count) {\n            const key = isRange || index > to ?\n                index + offset : ids !== state && ids[index] || index;\n            if (!subjects[index]) {\n                subjects[index] = new BehaviorSubject();\n                const changes = Changes.from(subjects[index], { key }, depth + 1);\n                children[index] = changes.component =\n                    create(changes, state[key], key, index);\n            }\n        }\n\n        index = count - 1;\n        children.length = count;\n        count = subjects.length;\n        while (++index < count) {\n            subjects[index].complete();\n        }\n\n        index = -1;\n        count = subjects.length = children.length;\n        while (++index < count) {\n            subjects[index].next([model, state]);\n        }\n\n        return children;\n    }\n}\n\nfunction convertToObservable(ish, skipNulls) {\n    if (ish == null) {\n        if (skipNulls) {\n            return Observable.empty();\n        }\n        return Observable.of(ish);\n    } else if (ish instanceof Observable ||\n        isArray(ish) || isPromise(ish)) {\n        return ish;\n    } else if (typeof ish[$$observable] === 'function') {\n        return ish[$$observable]();\n    } else if (typeof ish.subscribe === 'function') {\n        return Observable.from(ish);\n    } else {\n        return Observable.of(ish);\n    }\n}\n"]}