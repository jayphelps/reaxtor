{"version":3,"sources":["../src/Model.js"],"names":[],"mappings":"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","file":"Model.js","sourcesContent":["import { Model as FalcorModel } from 'falcor';\nimport { Observable } from 'rxjs/Observable';\nimport { SymbolShim } from 'rxjs/util/SymbolShim';\nimport parsePath from 'falcor-path-syntax';\nimport ModelResponse from 'falcor/lib/response/ModelResponse';\nimport InvalidateResponse from 'falcor/lib/response/InvalidateResponse';\n\nModelResponse.prototype[SymbolShim.observable] = function() {\n    return this;\n}\n\nclass ObservableModelResponse extends Observable {\n    constructor(source) {\n        super();\n        this.source = source;\n    }\n    lift(operator) {\n        const response = new ObservableModelResponse(this);\n        response.operator = operator;\n        return response;\n    }\n    _toJSONG() {\n        return new ObservableModelResponse(this.source._toJSONG());\n    }\n    progressively() {\n        return new ObservableModelResponse(this.source.progressively());\n    }\n}\n\nexport class Model extends FalcorModel {\n    /* implement inspect method for node's inspect utility */\n    inspect() {\n        return `{ v${this.getVersion()} ${JSON.stringify(this.getPath())} }`;\n    }\n    get() {\n        return new ObservableModelResponse(super.get.apply(this, arguments));\n    }\n    set() {\n        return new ObservableModelResponse(super.set.apply(this, arguments));\n    }\n    call() {\n        return new ObservableModelResponse(super.call.apply(this, arguments));\n    }\n    invalidate2(...args) {\n        return new ObservableModelResponse(new InvalidateResponse(this, args.map((path) => {\n            path = parsePath(path);\n            if (!Array.isArray(path)) {\n                throw new Error(`Invalid argument: ${path}`);\n            }\n            return path;\n        })));\n    }\n    preload() {\n        return new ObservableModelResponse(super.preload.apply(this, arguments));\n    }\n    getValue() {\n        return new ObservableModelResponse(super.getValue.apply(this, arguments));\n    }\n    setValue() {\n        return new ObservableModelResponse(super.setValue.apply(this, arguments));\n    }\n    _clone(opts) {\n        const clone = new Model(this);\n        for (let key in opts) {\n            const value = opts[key];\n            if (value === \"delete\") {\n                delete clone[key];\n            } else {\n                clone[key] = value;\n            }\n        }\n        if (clone._path.length > 0) {\n            clone.setCache = void 0;\n        }\n        return clone;\n    }\n}\n"]}