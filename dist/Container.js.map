{"version":3,"sources":["../src/Container.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEa;;;;;;;;;;;uCACM,QAAQ;;;AACnB,gBAAI,WAAW,EAAX,CADe;AAEnB,gBAAI,WAAW,EAAX,CAFe;AAGnB,mBAAO,OAAO,SAAP,CAAiB,UAAC,KAAD,EAAW;AAC/B,oBAAM,OAAO,OAAK,KAAL,CAAW,QAAX,EAAqB,QAArB,EAA+B,KAA/B,CAAP,CADyB;AAE/B,oBAAI,KAAK,MAAL,KAAgB,CAAhB,EAAmB;AACnB,2BAAO,uBAAW,EAAX,CAAc,CAAC,KAAD,CAAd,CAAP,CADmB;iBAAvB;AAGA,uBAAO,uBAAW,aAAX,CACH,WAAW,IAAX,EAAiB;sDAAI;;;;4BAAU,cAAU;iBAAxB,CADrB,CAL+B;aAAX,CAAxB,CAHmB;;;;8BAajB,UAAU,gBAA8B;;;gBAAlB,kBAAkB;gBAAV,kBAAU;;;AAE1C,gBAAI,QAAQ,CAAC,CAAD,CAF8B;AAG1C,gBAAI,QAAQ,OAAO,MAAP,CAH8B;;AAK1C,mBAAO,EAAE,KAAF,GAAU,KAAV,EAAiB;AACpB,oBAAI,CAAC,SAAS,KAAT,CAAD,EAAkB;AAClB,6BAAS,KAAT,IAAkB,sBAAlB,CADkB;AAElB,6BAAS,KAAT,IAAkB,KAAK,WAAL,CAAiB,SAAS,KAAT,CAAjB,EAAkC,OAAO,KAAP,CAAlC,EAAiD,KAAjD,CAAlB,CAFkB;iBAAtB;aADJ;;AAOA,oBAAQ,QAAQ,CAAR,CAZkC;AAa1C,qBAAS,MAAT,GAAkB,KAAlB,CAb0C;AAc1C,oBAAQ,SAAS,MAAT,CAdkC;AAe1C,mBAAO,EAAE,KAAF,GAAU,KAAV,EAAiB;AACpB,yBAAS,KAAT,EAAgB,QAAhB,GADoB;aAAxB;;AAIA,oBAAQ,CAAC,CAAD,CAnBkC;AAoB1C,oBAAQ,SAAS,MAAT,GAAkB,SAAS,MAAT,CApBgB;AAqB1C,mBAAO,EAAE,KAAF,GAAU,KAAV,EAAiB;AACpB,oBAAM,QAAQ,OAAO,KAAP,CAAR,CADc;AAEpB,oBAAM,QAAQ,OAAO,KAAP,CAAa,KAAb,CAAR,CAFc;AAGpB,yBAAS,KAAT,EAAgB,IAAhB,CAAqB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAArB,EAHoB;aAAxB;;AAMA,mBAAO,QAAP,CA3B0C;;;;WAdrC","file":"Container.js","sourcesContent":["import { Subject } from 'rxjs/Subject';\nimport { Component } from './Component';\nimport { Observable } from 'rxjs/Observable';\n\nexport class Container extends Component {\n    createChildren(models) {\n        var subjects = [];\n        var children = [];\n        return models.switchMap((tuple) => {\n            const kids = this.deref(subjects, children, tuple);\n            if (kids.length === 0) {\n                return Observable.of([tuple]);\n            }\n            return Observable.combineLatest(\n                children = kids, (...args) => [tuple, ...args]\n            );\n        });\n    }\n    deref(subjects, children, [ _model, _state ]) {\n\n        let index = -1;\n        let count = _state.length;\n\n        while (++index < count) {\n            if (!subjects[index]) {\n                subjects[index] = new Subject();\n                children[index] = this.createChild(subjects[index], _state[index], index);\n            }\n        }\n\n        index = count - 1;\n        children.length = count;\n        count = subjects.length;\n        while (++index < count) {\n            subjects[index].complete();\n        }\n\n        index = -1;\n        count = subjects.length = children.length;\n        while (++index < count) {\n            const state = _state[index];\n            const model = _model.deref(state);\n            subjects[index].next([model, state, index]);\n        }\n\n        return children;\n    }\n}\n"]}